ggplot2::geom_point() +
scale_color_manual(values = getPalette(length(unique(allChromsvsRefChroms$match))))
chromsvsRefChroms <- lapply(species, function(x){
cat(paste("Reading file ", x, ".gff\n", sep = ""))
gff <- read.delim(paste(GFFsdir, "/", x, ".gff", sep = ""), header = FALSE, sep = "\t")
gff <- gff[gff[, 1] %in% names(table(gff[, 1]))[table(gff[, 1]) > 50], ]
if(x == "LLON"){
gff[, 9]<- sub(":", "_", gff[, 9])
}
spPos <- which(colnames(OGs) == x)
expandedOGs <- lapply(OGs[, spPos], function(y){
unlist(strsplit(y, ", "))
})
empty <- rep(0, ncol(OGsofRef))
empty[colnames(OGsofRef) == ""] <- 1
allChromsvsRefChroms <- pbmcapply::pbmclapply(unique(gff[, 1]), function(y){
tempgff <- gff[gff[, 1] == y, ]
tempgff <- tempgff[order(tempgff[, 4], decreasing = FALSE), ]
chromVals <- sapply(tempgff[, 9], function(z){
out <- empty
pos <- which(sapply(expandedOGs, function(w){
z %in% w
}))
if(length(pos) > 0){
out <- OGsofRef[pos, ]
out <- names(out)[out == 1]
if(length(out) == 0)
out <- ""
} else{
out <- ""
}
return(out)
})
chromVals <- data.frame(pos = 1:length(chromVals), match = chromVals, chrom = rep(y, length(chromVals)))
chromVals <- chromVals[chromVals$match != "", ]
#row.names(chromVals) <- colnames(OGsofRef)
#chromVals <- reshape2::melt(chromVals)
#chromVals <- chromVals[chromVals$value == 1, ]
}, mc.cores = 15)
allChromsvsRefChroms <- do.call("rbind", allChromsvsRefChroms)
p1 <- ggplot2::ggplot(allChromsvsRefChroms, ggplot2::aes(x = chrom, y = pos, color = match)) +
ggplot2::geom_point() +
scale_color_manual(values = getPalette(length(unique(allChromsvsRefChroms$match))))
})
p1
x
x <- "OFUS"
cat(paste("Reading file ", x, ".gff\n", sep = ""))
gff <- read.delim(paste(GFFsdir, "/", x, ".gff", sep = ""), header = FALSE, sep = "\t")
gff <- gff[gff[, 1] %in% names(table(gff[, 1]))[table(gff[, 1]) > 50], ]
if(x == "LLON"){
gff[, 9]<- sub(":", "_", gff[, 9])
}
spPos <- which(colnames(OGs) == x)
expandedOGs <- lapply(OGs[, spPos], function(y){
unlist(strsplit(y, ", "))
})
empty <- rep(0, ncol(OGsofRef))
empty[colnames(OGsofRef) == ""] <- 1
allChromsvsRefChroms <- pbmcapply::pbmclapply(unique(gff[, 1]), function(y){
tempgff <- gff[gff[, 1] == y, ]
tempgff <- tempgff[order(tempgff[, 4], decreasing = FALSE), ]
chromVals <- sapply(tempgff[, 9], function(z){
out <- empty
pos <- which(sapply(expandedOGs, function(w){
z %in% w
}))
if(length(pos) > 0){
out <- OGsofRef[pos, ]
out <- names(out)[out == 1]
if(length(out) == 0)
out <- ""
} else{
out <- ""
}
return(out)
})
chromVals <- data.frame(pos = 1:length(chromVals), match = chromVals, chrom = rep(y, length(chromVals)))
chromVals <- chromVals[chromVals$match != "", ]
#row.names(chromVals) <- colnames(OGsofRef)
#chromVals <- reshape2::melt(chromVals)
#chromVals <- chromVals[chromVals$value == 1, ]
}, mc.cores = 15)
allChromsvsRefChroms <- do.call("rbind", allChromsvsRefChroms)
p1 <- ggplot2::ggplot(allChromsvsRefChroms, ggplot2::aes(x = chrom, y = pos, color = match)) +
ggplot2::geom_point() +
scale_color_manual(values = getPalette(length(unique(allChromsvsRefChroms$match))))
p1
getwd()
load("/mnt/disk2/Earthworms/References/processed/RepeatModeler/Superfamilies_RModeler.RData")
species <- c("NNAJ", "CMAT", "EAND", "LTER", "MVUL", "WPIG", "HNIP", "HMAN", "TLAP", "SBEN", "PROT", "PECH", "AVIR", "APAC", "SNUD", "OFUS", "PMAX", "LLON")
names(superfamilies) %in% species
superfamilies <- superfamilies[names(superfamilies) %in% species]
length(superfamilies)
superfamilies <- lapply(superfamilies, "[[", 3)
head(superfamilies[[1]])
getwd()
save(superfamilies, file = "Superfamilies_RModeler.RData")
log(3/100)
log(3/10)
log(1)
library(GenomicRanges)
library(pbapply)
load("GRTEs.RData")
setwd("/mnt/disk2/Earthworms/References/processed/RepeatModeler/")
load("GRTEs.RData")
load("chromSizes.RData")
species <- c("NNAJ", "CMAT", "EAND", "MVUL", "WPIG", "HMAN", "HNIP")
SFs <- c("All", "CMC-Chapaev-3", "CRE", "L2", "Dong-R4", "Kolobok-T2", "DIRS")
x <- species[1]
print(x)
ClitLGs <- read.delim(paste("/mnt/disk2/Earthworms/odp/", x, "_ALGs.txt", sep = ""), header = FALSE)
starts <- c(ClitLGs[, 2] - 10000, ClitLGs[, 3])
ends <- c(ClitLGs[, 2], ClitLGs[, 3] + 10000)
seqNames <- c(ClitLGs[, 1], ClitLGs[, 1])
ClitLG <- c(ClitLGs[, 4], ClitLGs[, 4])
GRLGs <- GRanges(seqnames = seqNames, IRanges(start = starts, end = ends), strand = "*", ClitLG = ClitLGs)
tempGRTEs <- GRTEs[x][[1]]
tempSizes <- sizes[x][[1]]
probChrom <- rep(tempSizes$names, round(tempSizes$size/1000000))
SF <- "L2"
print(SF)
if(SF != "All")
tempGRTEs <- tempGRTEs[tempGRTEs$superfamily == SF]
length(tempGRTEs)
y <- 1
seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
genesGFF <- read.delim(paste("/mnt/disk2/Earthworms/References/processed/", x, ".gff", sep = ""), header = FALSE)
genesGFF <- genesGFF[genesGFF[, 3] == "gene", ]
genesGR <- GRanges(seqnames = genesGFF[, 1], ranges = IRanges(start = genesGFF[, 4], end = genesGFF[, 5]), strand = genesGFF[, 7], geneID = genesGFF[, 9])
genesGFF <- read.delim(paste("/mnt/disk2/Earthworms/References/processed/", x, ".gff", sep = ""), header = FALSE)
genesGFF <- genesGFF[genesGFF[, 3] == "gene", ]
genesGR <- GRanges(seqnames = rep(genesGFF[, 1], 2), ranges = IRanges(start = c(genesGFF[, 4] - 10000, genesGFF[, 5]), end = c(genesGFF[, 4], genesGFF[, 5] + 10000)), strand = "*", geneID = rep(genesGFF[, 9], 2))
genesGR
print(x)
genesGFF <- read.delim(paste("/mnt/disk2/Earthworms/References/processed/", x, ".gff", sep = ""), header = FALSE)
genesGFF <- genesGFF[genesGFF[, 3] == "gene", ]
genesGR <- GRanges(seqnames = rep(genesGFF[, 1], 2), ranges = IRanges(start = c(genesGFF[, 4] - 10000, genesGFF[, 5]), end = c(genesGFF[, 4], genesGFF[, 5] + 10000)), strand = "*", geneID = rep(genesGFF[, 9], 2))
ClitLGs <- read.delim(paste("/mnt/disk2/Earthworms/odp/", x, "_ALGs.txt", sep = ""), header = FALSE)
starts <- c(ClitLGs[, 2] - 10000, ClitLGs[, 3])
ends <- c(ClitLGs[, 2], ClitLGs[, 3] + 10000)
seqNames <- c(ClitLGs[, 1], ClitLGs[, 1])
ClitLG <- c(ClitLGs[, 4], ClitLGs[, 4])
GRLGs <- GRanges(seqnames = seqNames, IRanges(start = starts, end = ends), strand = "*", ClitLG = ClitLGs)
tempGRTEs <- GRTEs[x][[1]]
tempSizes <- sizes[x][[1]]
print(SF)
if(SF != "All")
tempGRTEs <- tempGRTEs[tempGRTEs$superfamily == SF]
y
#seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
#starts <- sapply(seqNames, function(z){
#start <- sample(1:(tempSizes$size[tempSizes$names == z] - 10000), 1)
#})
#dummyGR <- GRanges(seqnames = seqNames, IRanges(start = starts, end = starts + 10000), strand = "*")
dummyGR <- genesGR[sample(1:length(genesGR), length(GRLGs))]
dummyGR
GRLGs
ovls <- length(findOverlaps(dummyGR, tempGRTEs))
ovls
observedCounts <- length(findOverlaps(GRLGs, tempGRTEs))
observedCounts
simCounts <- unlist(pbmclapply(1:1000, function(y){
#seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
#starts <- sapply(seqNames, function(z){
#start <- sample(1:(tempSizes$size[tempSizes$names == z] - 10000), 1)
#})
#dummyGR <- GRanges(seqnames = seqNames, IRanges(start = starts, end = starts + 10000), strand = "*")
dummyGR <- genesGR[sample(1:length(genesGR), length(GRLGs))]
ovls <- length(findOverlaps(dummyGR, tempGRTEs))
}, mc.cores = 5))
library(GenomicRanges)
library(pbapply)
library(pbmapply)
simCounts <- unlist(pbmclapply(1:1000, function(y){
#seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
#starts <- sapply(seqNames, function(z){
#start <- sample(1:(tempSizes$size[tempSizes$names == z] - 10000), 1)
#})
#dummyGR <- GRanges(seqnames = seqNames, IRanges(start = starts, end = starts + 10000), strand = "*")
dummyGR <- genesGR[sample(1:length(genesGR), length(GRLGs))]
ovls <- length(findOverlaps(dummyGR, tempGRTEs))
}, mc.cores = 5))
library(pbmcapply)
simCounts <- unlist(pbmclapply(1:1000, function(y){
#seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
#starts <- sapply(seqNames, function(z){
#start <- sample(1:(tempSizes$size[tempSizes$names == z] - 10000), 1)
#})
#dummyGR <- GRanges(seqnames = seqNames, IRanges(start = starts, end = starts + 10000), strand = "*")
dummyGR <- genesGR[sample(1:length(genesGR), length(GRLGs))]
ovls <- length(findOverlaps(dummyGR, tempGRTEs))
}, mc.cores = 5))
observedCounts <- length(findOverlaps(GRLGs, tempGRTEs))
hist(simCounts)
observedCounts
lowerTail <- sum(simCounts <= observedCounts)/length(simCounts)
upperTail <- sum(simCounts >= observedCounts)/length(simCounts)
lowerTail
upperTail
max(simCounts)
species <- c("NNAJ", "CMAT", "EAND", "MVUL", "WPIG", "HMAN", "HNIP")
SFs <- c("All", "CMC-Chapaev-3", "CRE", "L2", "Dong-R4", "Kolobok-T2", "DIRS")
TEsatBreakpoints <- lapply(species, function(x){
print(x)
genesGFF <- read.delim(paste("/mnt/disk2/Earthworms/References/processed/", x, ".gff", sep = ""), header = FALSE)
genesGFF <- genesGFF[genesGFF[, 3] == "gene", ]
genesGR <- GRanges(seqnames = rep(genesGFF[, 1], 2), ranges = IRanges(start = c(genesGFF[, 4] - 10000, genesGFF[, 5]), end = c(genesGFF[, 4], genesGFF[, 5] + 10000)), strand = "*", geneID = rep(genesGFF[, 9], 2))
ClitLGs <- read.delim(paste("/mnt/disk2/Earthworms/odp/", x, "_ALGs.txt", sep = ""), header = FALSE)
starts <- c(ClitLGs[, 2] - 10000, ClitLGs[, 3])
ends <- c(ClitLGs[, 2], ClitLGs[, 3] + 10000)
seqNames <- c(ClitLGs[, 1], ClitLGs[, 1])
ClitLG <- c(ClitLGs[, 4], ClitLGs[, 4])
GRLGs <- GRanges(seqnames = seqNames, IRanges(start = starts, end = ends), strand = "*", ClitLG = ClitLGs)
tempGRTEs <- GRTEs[x][[1]]
tempSizes <- sizes[x][[1]]
#probChrom <- rep(tempSizes$names, round(tempSizes$size/1000000))
out <- lapply(SFs, function(SF){
print(SF)
if(SF != "All")
tempGRTEs <- tempGRTEs[tempGRTEs$superfamily == SF]
if(length(tempGRTEs) > 0){
simCounts <- unlist(pbmclapply(1:1000, function(y){
#seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
#starts <- sapply(seqNames, function(z){
#start <- sample(1:(tempSizes$size[tempSizes$names == z] - 10000), 1)
#})
#dummyGR <- GRanges(seqnames = seqNames, IRanges(start = starts, end = starts + 10000), strand = "*")
dummyGR <- genesGR[sample(1:length(genesGR), length(GRLGs))]
ovls <- length(findOverlaps(dummyGR, tempGRTEs))
}, mc.cores = 5))
observedCounts <- length(findOverlaps(GRLGs, tempGRTEs))
lowerTail <- sum(simCounts <= observedCounts)/length(simCounts)
upperTail <- sum(simCounts >= observedCounts)/length(simCounts)
out <- data.frame(Species = x, SF, lowerTail, upperTail)
} else{
out <- data.frame(Species = x, SF, lowerTail = "-", upperTail = "-")
}
return(out)
})
out <- do.call("rbind", out)
})
TEsatBreakpoints <- do.call("rbind", TEsatBreakpoints)
write.table(TEsatBreakpoints, "TEsatBreakpoints_Genes.txt", quote = FALSE, row.names = FALSE, sep = "\t")
head(GRTEs[[1]])
candidaTEs <- unique(unlist(sapply(GRTEs, function(x){
unique(x$superfamily)
})))
candidaTEs
candidaTEs <- sort(unique(unlist(sapply(GRTEs, function(x){
unique(x$superfamily)
}))))
candidaTEs
SFs <- c("All", candidaTEs)
x
print(x)
genesGFF <- read.delim(paste("/mnt/disk2/Earthworms/References/processed/", x, ".gff", sep = ""), header = FALSE)
genesGFF <- genesGFF[genesGFF[, 3] == "gene", ]
genesGR <- GRanges(seqnames = rep(genesGFF[, 1], 2), ranges = IRanges(start = c(genesGFF[, 4] - 10000, genesGFF[, 5]), end = c(genesGFF[, 4], genesGFF[, 5] + 10000)), strand = "*", geneID = rep(genesGFF[, 9], 2))
ClitLGs <- read.delim(paste("/mnt/disk2/Earthworms/odp/", x, "_ALGs.txt", sep = ""), header = FALSE)
starts <- c(ClitLGs[, 2] - 10000, ClitLGs[, 3])
ends <- c(ClitLGs[, 2], ClitLGs[, 3] + 10000)
seqNames <- c(ClitLGs[, 1], ClitLGs[, 1])
ClitLG <- c(ClitLGs[, 4], ClitLGs[, 4])
GRLGs <- GRanges(seqnames = seqNames, IRanges(start = starts, end = ends), strand = "*", ClitLG = ClitLGs)
tempGRTEs <- GRTEs[x][[1]]
tempSizes <- sizes[x][[1]]
#probChrom <- rep(tempSizes$names, round(tempSizes$size/1000000))
out <- lapply(SFs, function(SF){
print(SF)
if(SF != "All")
tempGRTEs <- tempGRTEs[tempGRTEs$superfamily == SF]
if(length(tempGRTEs) > 0){
simCounts <- unlist(pbmclapply(1:1000, function(y){
#seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
#starts <- sapply(seqNames, function(z){
#start <- sample(1:(tempSizes$size[tempSizes$names == z] - 10000), 1)
#})
#dummyGR <- GRanges(seqnames = seqNames, IRanges(start = starts, end = starts + 10000), strand = "*")
dummyGR <- genesGR[sample(1:length(genesGR), length(GRLGs))]
ovls <- length(findOverlaps(dummyGR, tempGRTEs))
}, mc.cores = 5))
observedCounts <- length(findOverlaps(GRLGs, tempGRTEs))
lowerTail <- sum(simCounts <= observedCounts)/length(simCounts)
upperTail <- sum(simCounts >= observedCounts)/length(simCounts)
out <- data.frame(Species = x, SF, lowerTail, upperTail)
} else{
out <- data.frame(Species = x, SF, lowerTail = "-", upperTail = "-")
}
return(out)
})
out <- do.call("rbind", out)
out
out$lowerTail < 0.05
sum(out$lowerTail < 0.05)
out[out$lowerTail < 0.05, ]
out[out$lowerTail < 0.05 & out$lowerTail != "-", ]
out[out$upperTail < 0.05 & out$upperTail != "-", ]
p.adjust(out$upperTail, "BH")
p.adjust(out$upperTail, "BH") < 0.05
sum(p.adjust(out$upperTail, "BH") < 0.05)
sum(p.adjust(out$upperTail, "BH") < 0.05, na.rm = TRUE)
sum(p.adjust(out$lowerTail, "BH") < 0.05, na.rm = TRUE)
p.adjust(out$lowerTail)[p.adjust(out$lowerTail, "BH") < 0.05]
which(p.adjust(out$lowerTail, "BH") < 0.05)
out[c(9, 30), ]
p.adjust(out$lowerTail, "BH")
which(p.adjust(out$lowerTail, "BH") < 0.05)
length(p.adjust(out$lowerTail, "BH") < 0.05)
out$padjLower <- p.adjust(out$lowerTail, "BH")
out$padjLower[is.na(out$padjLower)] <- "-"
out$padjUpper <- p.adjust(out$upperTail, "BH")
out$padjUpper[is.na(out$padjUpper)] <- "-"
out
print(x)
genesGFF <- read.delim(paste("/mnt/disk2/Earthworms/References/processed/", x, ".gff", sep = ""), header = FALSE)
genesGFF <- genesGFF[genesGFF[, 3] == "gene", ]
genesGR <- GRanges(seqnames = rep(genesGFF[, 1], 2), ranges = IRanges(start = c(genesGFF[, 4] - 10000, genesGFF[, 5]), end = c(genesGFF[, 4], genesGFF[, 5] + 10000)), strand = "*", geneID = rep(genesGFF[, 9], 2))
ClitLGs <- read.delim(paste("/mnt/disk2/Earthworms/odp/", x, "_ALGs.txt", sep = ""), header = FALSE)
starts <- c(ClitLGs[, 2] - 10000, ClitLGs[, 3])
ends <- c(ClitLGs[, 2], ClitLGs[, 3] + 10000)
seqNames <- c(ClitLGs[, 1], ClitLGs[, 1])
ClitLG <- c(ClitLGs[, 4], ClitLGs[, 4])
GRLGs <- GRanges(seqnames = seqNames, IRanges(start = starts, end = ends), strand = "*", ClitLG = ClitLGs)
tempGRTEs <- GRTEs[x][[1]]
tempSizes <- sizes[x][[1]]
#probChrom <- rep(tempSizes$names, round(tempSizes$size/1000000))
out <- lapply(SFs, function(SF){
print(SF)
if(SF != "All")
tempGRTEs <- tempGRTEs[tempGRTEs$superfamily == SF]
if(length(tempGRTEs) > 0){
simCounts <- unlist(pbmclapply(1:1000, function(y){
#seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
#starts <- sapply(seqNames, function(z){
#start <- sample(1:(tempSizes$size[tempSizes$names == z] - 10000), 1)
#})
#dummyGR <- GRanges(seqnames = seqNames, IRanges(start = starts, end = starts + 10000), strand = "*")
dummyGR <- genesGR[sample(1:length(genesGR), length(GRLGs))]
ovls <- length(findOverlaps(dummyGR, tempGRTEs))
}, mc.cores = 5))
observedCounts <- length(findOverlaps(GRLGs, tempGRTEs))
lowerTail <- sum(simCounts <= observedCounts)/length(simCounts)
upperTail <- sum(simCounts >= observedCounts)/length(simCounts)
out <- data.frame(Species = x, SF, lowerTail, upperTail, windows = length(GRLGs))
} else{
out <- data.frame(Species = x, SF, lowerTail = "-", upperTail = "-", windows = 0)
}
return(out)
})
print(x)
genesGFF <- read.delim(paste("/mnt/disk2/Earthworms/References/processed/", x, ".gff", sep = ""), header = FALSE)
genesGFF <- genesGFF[genesGFF[, 3] == "gene", ]
genesGR <- GRanges(seqnames = rep(genesGFF[, 1], 2), ranges = IRanges(start = c(genesGFF[, 4] - 10000, genesGFF[, 5]), end = c(genesGFF[, 4], genesGFF[, 5] + 10000)), strand = "*", geneID = rep(genesGFF[, 9], 2))
ClitLGs <- read.delim(paste("/mnt/disk2/Earthworms/odp/", x, "_ALGs.txt", sep = ""), header = FALSE)
starts <- c(ClitLGs[, 2] - 10000, ClitLGs[, 3])
ends <- c(ClitLGs[, 2], ClitLGs[, 3] + 10000)
seqNames <- c(ClitLGs[, 1], ClitLGs[, 1])
ClitLG <- c(ClitLGs[, 4], ClitLGs[, 4])
GRLGs <- GRanges(seqnames = seqNames, IRanges(start = starts, end = ends), strand = "*", ClitLG = ClitLGs)
tempGRTEs <- GRTEs[x][[1]]
tempSizes <- sizes[x][[1]]
#probChrom <- rep(tempSizes$names, round(tempSizes$size/1000000))
out <- lapply(SFs, function(SF){
print(SF)
if(SF != "All")
tempGRTEs <- tempGRTEs[tempGRTEs$superfamily == SF]
if(length(tempGRTEs) > 0){
simCounts <- unlist(pbmclapply(1:1000, function(y){
#seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
#starts <- sapply(seqNames, function(z){
#start <- sample(1:(tempSizes$size[tempSizes$names == z] - 10000), 1)
#})
#dummyGR <- GRanges(seqnames = seqNames, IRanges(start = starts, end = starts + 10000), strand = "*")
dummyGR <- genesGR[sample(1:length(genesGR), length(GRLGs))]
ovls <- length(findOverlaps(dummyGR, tempGRTEs))
}, mc.cores = 5))
observedCounts <- length(findOverlaps(GRLGs, tempGRTEs))
lowerTail <- sum(simCounts <= observedCounts)/length(simCounts)
upperTail <- sum(simCounts >= observedCounts)/length(simCounts)
out <- data.frame(Species = x, SF, lowerTail, upperTail, windows = length(GRLGs), observedCounts, medianSim = median(simCounts))
} else{
out <- data.frame(Species = x, SF, lowerTail = "-", upperTail = "-", windows = 0, observedCounts = "-", medianSim = "-")
}
return(out)
})
out <- do.call("rbind", out)
out$padjLower <- p.adjust(out$lowerTail, "BH")
out$padjLower[is.na(out$padjLower)] <- "-"
out$padjUpper <- p.adjust(out$upperTail, "BH")
out$padjUpper[is.na(out$padjUpper)] <- "-"
out
TEsatBreakpoints <- lapply(species, function(x){
print(x)
genesGFF <- read.delim(paste("/mnt/disk2/Earthworms/References/processed/", x, ".gff", sep = ""), header = FALSE)
genesGFF <- genesGFF[genesGFF[, 3] == "gene", ]
genesGR <- GRanges(seqnames = rep(genesGFF[, 1], 2), ranges = IRanges(start = c(genesGFF[, 4] - 10000, genesGFF[, 5]), end = c(genesGFF[, 4], genesGFF[, 5] + 10000)), strand = "*", geneID = rep(genesGFF[, 9], 2))
ClitLGs <- read.delim(paste("/mnt/disk2/Earthworms/odp/", x, "_ALGs.txt", sep = ""), header = FALSE)
starts <- c(ClitLGs[, 2] - 10000, ClitLGs[, 3])
ends <- c(ClitLGs[, 2], ClitLGs[, 3] + 10000)
seqNames <- c(ClitLGs[, 1], ClitLGs[, 1])
ClitLG <- c(ClitLGs[, 4], ClitLGs[, 4])
GRLGs <- GRanges(seqnames = seqNames, IRanges(start = starts, end = ends), strand = "*", ClitLG = ClitLGs)
tempGRTEs <- GRTEs[x][[1]]
tempSizes <- sizes[x][[1]]
#probChrom <- rep(tempSizes$names, round(tempSizes$size/1000000))
out <- lapply(SFs, function(SF){
print(SF)
if(SF != "All")
tempGRTEs <- tempGRTEs[tempGRTEs$superfamily == SF]
if(length(tempGRTEs) > 0){
simCounts <- unlist(pbmclapply(1:1000, function(y){
#seqNames <- sample(probChrom, length(GRLGs), replace = TRUE)
#starts <- sapply(seqNames, function(z){
#start <- sample(1:(tempSizes$size[tempSizes$names == z] - 10000), 1)
#})
#dummyGR <- GRanges(seqnames = seqNames, IRanges(start = starts, end = starts + 10000), strand = "*")
dummyGR <- genesGR[sample(1:length(genesGR), length(GRLGs))]
ovls <- length(findOverlaps(dummyGR, tempGRTEs))
}, mc.cores = 5))
observedCounts <- length(findOverlaps(GRLGs, tempGRTEs))
lowerTail <- sum(simCounts <= observedCounts)/length(simCounts)
upperTail <- sum(simCounts >= observedCounts)/length(simCounts)
out <- data.frame(Species = x, SF, lowerTail, upperTail, windows = length(GRLGs), observedCounts, medianSim = median(simCounts))
} else{
out <- data.frame(Species = x, SF, lowerTail = "-", upperTail = "-", windows = length(GRLGs), observedCounts = "-", medianSim = "-")
}
return(out)
})
out <- do.call("rbind", out)
out$padjLower <- p.adjust(out$lowerTail, "BH")
out$padjLower[is.na(out$padjLower)] <- "-"
out$padjUpper <- p.adjust(out$upperTail, "BH")
out$padjUpper[is.na(out$padjUpper)] <- "-"
return(out)
})
TEsatBreakpoints <- do.call("rbind", TEsatBreakpoints)
write.table(TEsatBreakpoints, "TEsatBreakpoints_Genes_allSF.txt", quote = FALSE, row.names = FALSE, sep = "\t")
y <- "HOG96163_cds.fa_protein.fas.aligned"
system(paste("hyphy /mnt/disk2/Earthworms/aBSREL/post-msa.bf --protein-msa ", y, " --nucleotide-sequences ", sub("_cds.fa_protein.fas.aligned", "", y), "_cds.fa_nuc.fas --output ", y, "_codon --compress No", sep = ""))
paste("hyphy /mnt/disk2/Earthworms/aBSREL/post-msa.bf --protein-msa ", y, " --nucleotide-sequences ", sub("_cds.fa_protein.fas.aligned", "", y), "_cds.fa_nuc.fas --output ", y, "_codon --compress No", sep = "")
y
system(paste("hyphy /mnt/disk2/Earthworms/aBSREL/post-msa.bf --protein-msa ", y, " --nucleotide-sequences ", sub("_cds.fa_protein.fas.aligned", "", y), "_cds.fa_nuc.fas --output ", y, "_codon --compress No", sep = ""))
setwd("/mnt/disk2/Earthworms/aBSREL/")
library(Biostrings)
library(pbmcapply)
library(jsonlite)
library(ape)
library(phytools)
groups <- c("GENE_TREES_DEGs/EAND/BEFORE/HOGFasta_EAND_BEFORE/", "GENE_TREES_DEGs/EAND/IN/HOGFasta_EAND_IN/", "GENE_TREES_DEGs/HMED/BEFORE/HOGFasta_HMED_BEFORE/", "GENE_TREES_DEGs/HMED/IN/HOGFasta_HMED_IN/")
outDirs <- c("EAND/BEFORE/", "EAND/IN/", "HMED/BEFORE/", "HMED/IN/")
x <- 1
setwd(paste("/mnt/disk2/Earthworms/aBSREL/", outDirs[x], sep = ""))
y
system(paste("hyphy /mnt/disk2/Earthworms/aBSREL/post-msa.bf --protein-msa ", y, " --nucleotide-sequences ", sub("_cds.fa_protein.fas.aligned", "", y), "_cds.fa_nuc.fas --output ", y, "_codon --compress No", sep = ""))
y
system(paste("hyphy /mnt/disk2/Earthworms/aBSREL/post-msa.bf --protein-msa ", y, " --nucleotide-sequences ", sub("_cds.fa_protein.fas.aligned", "", y), "_cds.fa_nuc.fas --output ", y, "_codon --compress No", sep = ""))
y <- "HOG95751_cds.fa_protein.fas.aligned_codon"
system(paste("hyphy /mnt/disk2/Earthworms/aBSREL/post-msa.bf --protein-msa ", y, " --nucleotide-sequences ", sub("_cds.fa_protein.fas.aligned", "", y), "_cds.fa_nuc.fas --output ", y, "_codon --compress No", sep = ""))
y
y <- "HOG95751_cds.fa_protein.fas.aligned"
system(paste("hyphy /mnt/disk2/Earthworms/aBSREL/post-msa.bf --protein-msa ", y, " --nucleotide-sequences ", sub("_cds.fa_protein.fas.aligned", "", y), "_cds.fa_nuc.fas --output ", y, "_codon --compress No", sep = ""))
system(paste("hyphy /mnt/disk2/Earthworms/aBSREL/post-msa.bf --protein-msa ", y, " --nucleotide-sequences ", sub("_cds.fa_protein.fas.aligned", "", y), "_cds.fa_nuc.fas --output ", y, "_codon --compress No", sep = ""))
system(paste("hyphy /mnt/disk2/Earthworms/aBSREL/post-msa.bf --protein-msa ", y, " --nucleotide-sequences ", sub("_cds.fa_protein.fas.aligned", "", y), "_cds.fa_nuc.fas --output ", y, "_codon --compress No", sep = ""))
y
setwd("/mnt/disk2/Earthworms/aBSREL/")
library(Biostrings)
library(pbmcapply)
library(jsonlite)
library(ape)
library(phytools)
groups <- c("GENE_TREES_DEGs/EAND/BEFORE/HOGFasta_EAND_BEFORE/", "GENE_TREES_DEGs/EAND/IN/HOGFasta_EAND_IN/", "GENE_TREES_DEGs/HMED/BEFORE/HOGFasta_HMED_BEFORE/", "GENE_TREES_DEGs/HMED/IN/HOGFasta_HMED_IN/")
outDirs <- c("EAND/BEFORE/", "EAND/IN/", "HMED/BEFORE/", "HMED/IN/")
clitellata <- c("RAND1","PMEY1","AUJA1","PHRE1","PVOL1","ECRY","TSTR1","HMAN","WPIG","HNIP","HMED1","PELO1","MVUL","EAND","CMAT","NNAJ")
absrelResults <- lapply(1:4, function(x){
setwd(paste("/mnt/disk2/Earthworms/aBSREL/", outDirs[x], sep = ""))
files <- list.files(pattern = "_cds.fa_protein.fas.aligned_codon$")
summaryPvals <- lapply(files, function(y){
#system(paste("hyphy absrel --alignment ", y, " --tree ", sub("_cds.fa_protein.fas.aligned_codon", "", y), "_cds.fa_protein.fas.aligned.trimmed.treefile_recs.nwk --branches Internal", sep = ""))
data <- fromJSON(paste(y, ".ABSREL.json", sep = ""))
tempTree <- data$input$trees[[1]]
pvals <- sapply(names(data$`branch attributes`[[1]]), function(z){
out <- data$`branch attributes`[[1]][[z]]$`Corrected P-value`
if(is.null(out)){
out <- -1
}
return(out)
})
pvals <- pvals[pvals != -1]
tree <- read.tree(text = paste(tempTree, ";", sep = ""))
write.tree(tree, paste(y, ".ABSREL.nwk", sep = ""))
if(sum(pvals < 0.05) > 0){
clitFraction <- sapply(names(pvals)[pvals < 0.05], function(z){
toEval <- which(tree$node.label == z) + length(tree$tip.label)
descendants <- getDescendants(tree, toEval)
preSpecies <- tree$tip.label[descendants[descendants <= length(tree$tip.label)]]
species <- sapply(strsplit(preSpecies, "_"), "[[", 1)
out <- sum(species %in% clitellata)/length(species)
})
out <- data.frame(dataset = outDirs[x], HOG = sub("_cds.fa_protein.fas.aligned_codon", "", y), branch = names(clitFraction), pvals = pvals[pvals < 0.05], clitFraction = clitFraction)
} else{
out <- data.frame(dataset = outDirs[x], HOG = sub("_cds.fa_protein.fas.aligned_codon", "", y), branch = "-", pvals = "-", clitFraction = "-")
}
print(out)
return(out)
})
summaryPvals <- do.call("rbind", summaryPvals)
})
absrelResults <- do.call("rbind", absrelResults)
head(absrelResults)
write.table(absrelResults, "absrelResults.txt", quote = FALSE, row.names = FALSE, sep = "\t")
getwd()
